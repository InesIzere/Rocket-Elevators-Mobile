{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\izere\\\\RE\\\\screens\\\\ElevatorStatus\\\\index.js\";\n\nimport 'react-native-gesture-handler';\nimport React, { useState, useEffect } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Appbar, Button } from 'react-native-paper';\n\nvar ElevatorStatusScreen = function ElevatorStatusScreen(props) {\n  A;\n  var id = props.route.params.id;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function () {\n    fetch(\"https://rocketmobile2000.herokuapp.com/api/elevators/\" + id).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return setData(json);\n    }).catch(function (error) {\n      return console.error(error);\n    }).finally(function () {\n      return setLoading(false);\n    });\n  }, [data]);\n  useEffect(function () {\n    return function () {\n      console.log(\"cleaned up\");\n    };\n  }, []);\n\n  function updateStatus() {\n    fetch(\"https://rocketmobile2000.herokuapp.com/api/elevators/\" + id, {\n      method: 'POST',\n      headers: new Headers({\n        'Content-Type': ' application/json'\n      }),\n      body: JSON.stringify({\n        status: 'Active'\n      })\n    }).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      alert(responseText);\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  ;\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  }, React.createElement(TouchableOpacity, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, isLoading ? React.createElement(ActivityIndicator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }\n  }) : React.createElement(Text, {\n    style: [styles.status, data.status == \"Inactive\" ? {\n      backgroundColor: 'red'\n    } : {\n      backgroundColor: 'green'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, data.status), React.createElement(Button, {\n    color: \"black\",\n    icon: \"camera\",\n    mode: \"outlined\",\n    onPress: function onPress() {\n      return updateStatus();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"End Task\"), React.createElement(Button, {\n    backgroundColor: \"blue\",\n    color: \"black\",\n    icon: \"logout\",\n    mode: \"outlined\",\n    onPress: function onPress() {\n      return props.navigation.navigate(\"Elevator List\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, \"Back\")));\n};\n\nvar styles = StyleSheet.create({\n  status: {\n    padding: 10,\n    borderRadius: 10,\n    color: \"white\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    fontSize: 20\n  },\n  elevatorId: {\n    backgroundColor: \"red\",\n    padding: 20,\n    borderRadius: 5,\n    textAlign: \"center\"\n  },\n  elevatorIdText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  image: {\n    flex: 1,\n    resizeMode: \"cover\",\n    justifyContent: \"center\"\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderBottomColor: '#eeeeee'\n  },\n  instructions: {\n    fontSize: 18,\n    margin: 10,\n    textAlign: 'center',\n    color: 'rgb(34, 65, 115)'\n  },\n  button: {\n    flex: 1,\n    margin: 20,\n    backgroundColor: \"#ecf0f1\",\n    margin: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 25,\n    paddingTop: 20,\n    paddingBottom: 20\n  },\n  buttonText: {\n    fontSize: 15,\n    color: \"#0f0f0f\",\n    fontWeight: \"bold\",\n    alignSelf: \"center\",\n    textTransform: \"uppercase\"\n  },\n  textinput: {\n    fontSize: 30,\n    height: 40,\n    margin: 10,\n    color: \"#0f0f0f\"\n  },\n  elevatorId: {\n    backgroundColor: \"red\",\n    padding: 20,\n    borderRadius: 5,\n    textAlign: \"center\",\n    borderBottomColor: 'rgb(24, 36, 56)'\n  },\n  elevatorIdText: {\n    fontSize: 20,\n    color: 'rgb(24, 36, 56)'\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 10,\n    top: 130\n  },\n  image: {\n    flex: 1,\n    resizeMode: \"cover\",\n    justifyContent: \"center\"\n  }\n});\nexport default ElevatorStatusScreen;","map":{"version":3,"sources":["C:/Users/izere/RE/screens/ElevatorStatus/index.js"],"names":["React","useState","useEffect","Appbar","Button","ElevatorStatusScreen","props","A","id","route","params","isLoading","setLoading","data","setData","fetch","then","response","json","catch","error","console","finally","log","updateStatus","method","headers","Headers","body","JSON","stringify","status","text","responseText","alert","styles","backgroundColor","navigation","navigate","StyleSheet","create","padding","borderRadius","color","textAlign","fontWeight","fontSize","elevatorId","elevatorIdText","image","flex","resizeMode","justifyContent","container","alignItems","borderBottomColor","instructions","margin","button","paddingTop","paddingBottom","buttonText","alignSelf","textTransform","textinput","height","fab","position","right","top"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\r\nimport React,{useState,useEffect} from 'react';\r\nimport { ActivityIndicator,ImageBackground,Image, StyleSheet, Text, View, TouchableOpacity, ScrollView} from 'react-native';\r\nimport {  Appbar, Button} from 'react-native-paper';\r\n\r\n\r\n\r\nconst ElevatorStatusScreen=(props)=> {A\r\n\r\n    const { id } = props.route.params;\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [data, setData] = useState([]);\r\n\r\n// function for status Check\r\n     useEffect(()=>{\r\n      fetch(`https://rocketmobile2000.herokuapp.com/api/elevators/${id}`)\r\n        .then((response) => response.json())\r\n        .then((json) => setData(json))\r\n        .catch((error) => console.error(error))\r\n        .finally(() => setLoading(false));                      \r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n          console.log(\"cleaned up\");\r\n        };\r\n      }, []);\r\n\r\n\r\n\r\nfunction updateStatus() {\r\n    fetch(`https://rocketmobile2000.herokuapp.com/api/elevators/${id}`, {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n                   'Content-Type': ' application/json', //  Content-Type\r\n          }),\r\n        body: JSON.stringify({\r\n            status: 'Active'\r\n          })\r\n          // <-- Post parameters\r\n      })\r\n      .then((response) => response.text())\r\n      .then((responseText) => {\r\n        alert(responseText)\r\n        \r\n      })\r\n      .catch((error) => {\r\n          console.error(error);\r\n      });\r\n    };\r\n\r\n   //console.log(data)\r\n  return (\r\n  <View >\r\n\r\n     \r\n    <TouchableOpacity>\r\n\r\n\r\n\r\n     {isLoading ? <ActivityIndicator/> : (\r\n        <Text  style={[\r\n        styles.status,\r\n        data.status == \"Inactive\" ?\r\n        { backgroundColor: 'red' } \r\n        : { backgroundColor: 'green' }\r\n          ]}>\r\n         {data.status}\r\n          </Text>\r\n\r\n        )}\r\n\r\n\r\n        <Button   color=\"black\"\r\n          icon=\"camera\" mode=\"outlined\" onPress={() => updateStatus()}>\r\n          \r\n           End Task\r\n        </Button>  \r\n\r\n\r\n\r\n          <Button backgroundColor= \"blue\"  color=\"black\"\r\n            icon=\"logout\" mode=\"outlined\" onPress={() => props.navigation.navigate(\"Elevator List\")}>\r\n            Back\r\n           </Button>  \r\n       </TouchableOpacity>\r\n   \r\n     </View>\r\n    );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n   \r\n    \r\n    status: {\r\n      padding: 10,\r\n      borderRadius: 10,\r\n      color: \"white\",\r\n      textAlign: \"center\",\r\n      fontWeight: \"bold\",\r\n      fontSize: 20,\r\n    },\r\n   \r\n   \r\n    elevatorId: {\r\n      backgroundColor: \"red\",\r\n      padding: 20,\r\n      borderRadius: 5,\r\n      textAlign: \"center\"\r\n    },\r\n    elevatorIdText: {\r\n      fontSize: 20,\r\n      color: '#fff',\r\n  \r\n    },\r\n    image: {\r\n        flex: 1,\r\n        resizeMode: \"cover\",\r\n        justifyContent: \"center\"\r\n      },\r\n\r\n      container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        \r\n        borderBottomColor: '#eeeeee'\r\n      },\r\n      instructions: {\r\n        fontSize: 18,\r\n        margin: 10,\r\n        textAlign: 'center',\r\n        color: 'rgb(34, 65, 115)',\r\n    \r\n      }, \r\n      button: {\r\n        flex: 1,\r\n        margin: 20,\r\n        backgroundColor: \"#ecf0f1\",\r\n        margin: 10,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        fontSize: 25,\r\n        paddingTop: 20,\r\n        paddingBottom: 20\r\n      },\r\n      buttonText: {\r\n        fontSize: 15,\r\n        color: \"#0f0f0f\",\r\n        fontWeight: \"bold\",\r\n        alignSelf: \"center\",\r\n        textTransform: \"uppercase\"\r\n      },\r\n      textinput: {\r\n        fontSize:30, height: 40,\r\n        margin: 10,\r\n        color: \"#0f0f0f\",\r\n    \r\n      },\r\n      elevatorId: {\r\n        backgroundColor: \"red\",\r\n        padding: 20,\r\n        borderRadius: 5,\r\n        textAlign: \"center\",\r\n        \r\n        borderBottomColor: 'rgb(24, 36, 56)'\r\n      },\r\n      elevatorIdText: {\r\n        fontSize: 20,\r\n        color: 'rgb(24, 36, 56)',\r\n    \r\n      },\r\n      fab: {\r\n          position: 'absolute',\r\n          margin: 16,\r\n          right: 10,\r\n          top: 130\r\n          ,\r\n      },\r\n      image: {\r\n        flex: 1,\r\n        resizeMode: \"cover\",\r\n        justifyContent: \"center\"\r\n      }\r\n      });\r\n \r\n  \r\n  export default ElevatorStatusScreen;"]},"metadata":{},"sourceType":"module"}